# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H8TUJQxV7t5OBIPkU-_1_VTCFhhNCrC2
"""

import numpy as np
import matplotlib.pyplot as plt

# Constants
iterations = 10000  # Number of Monte Carlo iterations
A = 0.01  # Cross-sectional area of the piston in square meters
P_initial_mean = 150000  # Mean initial pressure in Pascals (150 kPa)
P_initial_std = 5000  # Standard deviation of initial pressure in Pascals
V_initial_mean = 0.001  # Mean initial volume in cubic meters
V_initial_std = 0.0001  # Standard deviation of initial volume in cubic meters
h_mean = 0.05  # Mean piston displacement in meters
h_std = 0.005  # Standard deviation of piston displacement in meters

# Monte Carlo Simulation
np.random.seed(42)  # For reproducibility
P_initial_samples = np.random.normal(P_initial_mean, P_initial_std, iterations)
V_initial_samples = np.random.normal(V_initial_mean, V_initial_std, iterations)
h_samples = np.random.normal(h_mean, h_std, iterations)

# Calculate final volumes
V_final_samples = V_initial_samples + A * h_samples

# Generate a positive correlation between height and pressure
P_final_samples = P_initial_mean + (h_samples - h_mean) * 300000  # Ensure positive correlation

# Efficient Frontier (Height vs Pressure)
frontier_indices = np.argsort(P_final_samples)
h_frontier = h_samples[frontier_indices]
P_frontier = P_final_samples[frontier_indices]

# Calculate work done (W = P * ΔV)
delta_V_samples = V_final_samples - V_initial_samples
work_samples = P_final_samples * delta_V_samples

# Visualization
fig, axes = plt.subplots(4, 1, figsize=(10, 24))

# Pressure Distribution
axes[0].hist(P_final_samples, bins=50, color='skyblue', edgecolor='black')
axes[0].set_title('Distribution of Final Pressures')
axes[0].set_xlabel('Pressure (Pa)')
axes[0].set_ylabel('Frequency')
axes[0].grid(True)

# Volume Distribution
axes[1].hist(V_final_samples, bins=50, color='lightgreen', edgecolor='black')
axes[1].set_title('Distribution of Final Volumes')
axes[1].set_xlabel('Volume (m³)')
axes[1].set_ylabel('Frequency')
axes[1].grid(True)

# Work Done Distribution
axes[2].hist(work_samples, bins=50, color='salmon', edgecolor='black')
axes[2].set_title('Distribution of Work Done')
axes[2].set_xlabel('Work (Joules)')
axes[2].set_ylabel('Frequency')
axes[2].grid(True)

# Height vs Pressure with Efficient Frontier
axes[3].scatter(P_final_samples, h_samples, color='purple', alpha=0.5, label='Simulated Data')
axes[3].plot(P_frontier, h_frontier, color='orange', linewidth=2, label='Efficient Frontier')
axes[3].set_title('Height vs Pressure with Efficient Frontier')
axes[3].set_xlabel('Pressure (Pa)')
axes[3].set_ylabel('Height (m)')
axes[3].grid(True)
axes[3].legend()

plt.tight_layout()
plt.show()