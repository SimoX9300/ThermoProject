# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H8TUJQxV7t5OBIPkU-_1_VTCFhhNCrC2
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from sklearn.metrics import r2_score

# Constants
P_atm = 101325      # Atmospheric pressure in Pascals (1 atm)
n = 0.01            # Moles of gas
R = 8.314           # Universal gas constant (J/mol/K)
V = 0.001           # Fixed volume of the cylinder (m^3)
T0 = 300            # Initial temperature (K)
Q_rate = 100        # Heat addition rate (J/s)
cp = 4.18           # Specific heat capacity of water (J/g/K)

# Generate synthetic temperature-time data (linear heat input)
time = np.linspace(0, 10, 100)  # Time in seconds
T = T0 + (Q_rate / (n * cp)) * time  # Linear temperature increase with time

# Calculate pressure using the ideal gas law
P = (n * R * T) / V + P_atm  # Add atmospheric pressure as initial value

# Add noise to simulate experimental data
P_noisy = P + np.random.normal(0, 5000, len(P))

# Define the exponential model for fitting
def exponential_model(t, a, b, c):
    return a * np.exp(b * t) + c  # Exponential model with offset

# Fit the exponential model to the noisy data
exp_params, _ = curve_fit(exponential_model, time, P_noisy, p0=[1e6, 0.1, P_atm], maxfev=5000)

# Predict pressure using the fitted model
P_fit = exponential_model(time, *exp_params)

# Calculate R^2 value
r2_exponential = r2_score(P_noisy, P_fit)

# Print the results
print("Exponential Model Fitting Results:")
print(f"Fitted Parameters: a={exp_params[0]:.2f}, b={exp_params[1]:.4f}, c={exp_params[2]:.2f}")
print(f"R^2 Value: {r2_exponential:.4f}")

# Plot the data and the fitted model
plt.figure(figsize=(10, 6))
plt.scatter(time, P_noisy, label="Synthetic Data (Noisy)", color="black", s=15)
plt.plot(time, P_fit, label=f"Exponential Fit (R^2={r2_exponential:.4f})", color="blue", linestyle="-")
plt.axhline(P_atm, color='red', linestyle='--', label="Initial Pressure (P_atm)")
plt.xlabel("Time (s)")
plt.ylabel("Pressure (Pa)")
plt.title("Exponential Model Fitting for Pressure Buildup")
plt.legend()
plt.grid(True)
plt.show()